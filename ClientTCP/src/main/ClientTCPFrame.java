/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

/**
 *
 * @author Borja
 */

import java.io.*;
import java.net.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;


public class ClientTCPFrame extends javax.swing.JFrame {

    
   
    static Socket socket;
    
    
    /**
     * Creates new form ClientTCPFrame
     */
    public ClientTCPFrame() {
        initComponents();
        generateTemperatureButton.setEnabled(false);
        messageTxt.setEnabled(false);
        sendMessageButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageLbl = new javax.swing.JLabel();
        HxLbl = new javax.swing.JLabel();
        generateTemperatureButton = new javax.swing.JButton();
        sendMessageButton = new javax.swing.JButton();
        messageTxt = new javax.swing.JTextField();
        newTileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        messageLbl.setText("Message");

        HxLbl.setText("0x");

        generateTemperatureButton.setText("Generate new Temperature");
        generateTemperatureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateTemperatureButtonActionPerformed(evt);
            }
        });

        sendMessageButton.setText("Send Data");
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });

        newTileButton.setText("NEW TILE");
        newTileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(83, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(HxLbl)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(162, 162, 162)
                                .addComponent(sendMessageButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(messageTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addComponent(generateTemperatureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(messageLbl)))
                .addGap(70, 70, 70))
            .addGroup(layout.createSequentialGroup()
                .addGap(280, 280, 280)
                .addComponent(newTileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(newTileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(messageLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HxLbl)
                    .addComponent(generateTemperatureButton)
                    .addComponent(messageTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sendMessageButton)
                .addGap(55, 55, 55))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
     public static String generateRandomId(int numBytes) {

         String idTile = "";
         
         for (int i=0; i<numBytes; i++){
            
           int degrees = randMessage(17, 255);
           
           String Hex = decimal2Hex(degrees);
           
           
           idTile = idTile + Hex;
           
         }
         
         return idTile;
          
         
}
     
     public static String generateRandomTemperature() {

        
         String temperatureTile = "";
         
         
    //We generate the temperature random bytes ( Values between 30 and 50)
        for (int i=0; i<1; i++){
            
           int degrees = randMessage(30, 50);
           
           String Hex = decimal2Hex(degrees);
           
           temperatureTile = temperatureTile + Hex;
            
        }
        
        //I think that always end at "00" because we use LittleEndian
        
         temperatureTile = temperatureTile + "00";
         
         return temperatureTile;
         
}
    
    
    //Function to convert decimal to Hex

    public static String decimal2Hex(int decimal) {
        
    
        
         return Integer.toHexString(decimal);
        
        
    }
    
    //Function to generate random number
    
    public static int randMessage(int min, int max) {

    
  
    Random rand = new Random();

    // nextInt is normally exclusive of the top value,
    // so add 1 to make it inclusive
    int randomNum = rand.nextInt((max - min) + 1) + min;

    return randomNum;
}
    
    
    public void sendData() throws IOException {

    
  
                String message;  //Variable that contains the message
        
                socket = new Socket("127.0.0.1",6000); //connection at localhost and port 6000
 
                //"out" is a DataOutputStream object that will serve us to send data to server
                DataOutputStream out = new DataOutputStream(socket.getOutputStream());
 
                 //Get the message oh the textbox
                message = messageTxt.getText();
                
                //Get the current day
                
                String date = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date());
                
                message = message + date;
                
                
 
                //We send the encripted message
                out.writeUTF(message); 
                
                

                


    
}
    
    
    private void generateTemperatureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateTemperatureButtonActionPerformed
        
        
        
        
        String actualMessage = messageTxt.getText();
        
        
        String newTemperature = generateRandomTemperature();
        
        actualMessage = actualMessage.replace(actualMessage.substring(32,36), newTemperature);
        
        
   
        messageTxt.setText(actualMessage);
        sendMessageButton.setEnabled(true);
        
        
        
        
        
        
    }//GEN-LAST:event_generateTemperatureButtonActionPerformed

    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
          
        
        
        try {
            sendData();
        } catch (IOException ex) {
            Logger.getLogger(ClientTCPFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        generateTemperatureButton.setEnabled(false);
        sendMessageButton.setEnabled(false);
   
        
       
        
    }//GEN-LAST:event_sendMessageButtonActionPerformed

    private void newTileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTileButtonActionPerformed
        
        String actualMessage = "";
        
        actualMessage = generateRandomId(16);
        actualMessage = actualMessage + generateRandomTemperature();
        
 
        
        messageTxt.setText(actualMessage);
        
        generateTemperatureButton.setEnabled(true);
        sendMessageButton.setEnabled(true);
        
    }//GEN-LAST:event_newTileButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientTCPFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientTCPFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientTCPFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientTCPFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientTCPFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HxLbl;
    private javax.swing.JButton generateTemperatureButton;
    private javax.swing.JLabel messageLbl;
    private javax.swing.JTextField messageTxt;
    private javax.swing.JButton newTileButton;
    private javax.swing.JButton sendMessageButton;
    // End of variables declaration//GEN-END:variables
}
